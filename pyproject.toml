[project]
name = "browser-use-linkedin"
description = "AI-powered LinkedIn automation tool by Starnus Technology B.V."
authors = [
    { name = "Starnus Technology B.V.", email = "contact@starnus.com" },
    { name = "Gregor Zunic" }
]
version = "1.0.0"
readme = "README.md"
requires-python = ">=3.11,<4.0"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
keywords = ["linkedin", "automation", "ai", "browser", "scraping", "networking"]
homepage = "https://github.com/Starnus/browser-use-linkedin"
repository = "https://github.com/Starnus/browser-use-linkedin"
dependencies = [
    # Core browser automation
    "playwright>=1.52.0",
    "patchright>=1.52.5",
    
    # LinkedIn automation essentials
    "google-generativeai>=0.8.0",
    "python-dotenv>=1.0.1",
    "openpyxl>=3.1.0",  # Excel file handling
    "pandas>=2.0.0",    # Data processing
    
    # Browser-use core dependencies
    "aiofiles>=24.1.0",
    "httpx>=0.28.1",
    "pydantic>=2.11.5",
    "psutil>=7.0.0",
    "requests>=2.32.3",
    "typing-extensions>=4.12.2",
    "markdownify==1.1.0",
    "bubus>=1.4.5",
    
    # Optional LLM providers (users can choose)
    "anthropic>=0.54.0",
    "openai>=1.81.0",
]
# google-api-core: only used for Google LLM APIs
# pyperclip: only used for examples that use copy/paste
# pyobjc: only used to get screen resolution on macOS
# screeninfo: only used to get screen resolution on Linux/Windows
# markdownify: used for page text content extraction for passing to LLM
# openai: datalib,voice-helpers are actually NOT NEEDED but openai produces noisy errors on exit without them TODO: fix
# rich: used for terminal formatting and styling in CLI
# click: used for command-line argument parsing
# textual: used for terminal UI

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.11.0",
]
all-llms = [
    "openai>=1.81.0",
    "groq>=0.28.0",
    "ollama>=0.5.1",
    "google-auth>=2.40.3",
    "google-api-python-client>=2.174.0",
]

# will prefer to use local source code checked out in ../../browser-use (if present) instead of pypi browser-use package
# [tool.uv.sources]
# bubus = { path = "../bubus", editable = true }


[project.urls]
Documentation = "https://github.com/Starnus/browser-use-linkedin/blob/main/README.md"
Homepage = "https://github.com/Starnus/browser-use-linkedin"
Repository = "https://github.com/Starnus/browser-use-linkedin"
"Bug Tracker" = "https://github.com/Starnus/browser-use-linkedin/issues"
"Security Policy" = "https://github.com/Starnus/browser-use-linkedin/blob/main/SECURITY.md"

[project.scripts]
linkedin-automation = "linkedin_automation:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[tool.codespell]
ignore-words-list = "bu,wit,dont,cant,wont,re-use,re-used,re-using,re-usable,thats,doesnt,doubleclick"
skip = "*.json"

[tool.ruff]
line-length = 130
fix = true

[tool.ruff.lint]
select = ["ASYNC", "E", "F", "FAST", "I", "PLE"]
ignore = ["ASYNC109", "E101", "E402", "E501", "F841", "E731", "W291"]  # TODO: determine if adding timeouts to all the unbounded async functions is needed / worth-it so we can un-ignore ASYNC109
unfixable = ["E101", "E402", "E501", "F841", "E731"]

[tool.ruff.format]
quote-style = "single"
indent-style = "tab"
line-ending = "lf"
docstring-code-format = true
docstring-code-line-length = 140
skip-magic-trailing-comma = false

[tool.pyright]
typeCheckingMode = "basic"
exclude = ["tests/old/", ".venv/", ".git/", "__pycache__/", "./test_*.py", "./debug_*.py", "private_example/"]
venvPath = "."
venv = ".venv"


[tool.hatch.build]
include = [
    "browser_use/**/*.py",
    "!browser_use/**/tests/*.py",
    "!browser_use/**/tests.py",
    "browser_use/agent/system_prompt.md",
    "browser_use/agent/system_prompt_no_thinking.md",
    "browser_use/agent/system_prompt_flash.md",
    "browser_use/dom/**/*.js",
    "!tests/**/*.py",
]

[tool.pytest.ini_options]
timeout = 300
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
asyncio_default_test_loop_scope = "session"
markers = [
    "slow: marks tests as slow (deselect with `-m 'not slow'`)",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: mark tests as async tests",
]
testpaths = [
    "tests"
]
python_files = ["test_*.py", "*_test.py"]
addopts = "-svx --strict-markers --tb=short --dist=loadscope"
log_cli = true
log_cli_format = "%(levelname)-8s [%(name)s] %(message)s"
filterwarnings = [
    "ignore::pytest.PytestDeprecationWarning",
    "ignore::DeprecationWarning",
]
log_level = "DEBUG"


[tool.hatch.metadata]
allow-direct-references = true

[tool.uv]
# required-environments = [
#     "sys_platform == 'darwin' and platform_machine == 'arm64'",
#     "sys_platform == 'darwin' and platform_machine == 'x86_64'",
#     "sys_platform == 'linux' and platform_machine == 'x86_64'",
#     "sys_platform == 'linux' and platform_machine == 'aarch64'",
#     # "sys_platform == 'linux' and platform_machine == 'arm64'",  # no pytorch wheels available yet
#     "sys_platform == 'win32' and platform_machine == 'x86_64'",
#     # "sys_platform == 'win32' and platform_machine == 'arm64'",  # no pytorch wheels available yet
# ]
dev-dependencies = [
    "ruff>=0.11.2",
    "tokencost>=0.1.16",
    "build>=1.2.2",
    "pytest>=8.3.5",
    "pytest-asyncio>=1.0.0",
    "pytest-httpserver>=1.0.8",
    "fastapi>=0.115.8",
    "inngest>=0.4.19",
    "uvicorn>=0.34.0",
    "ipdb>=0.13.13",
    "pre-commit>=4.2.0",
    "codespell>=2.4.1",
    "pyright>=1.1.403",
    "ty>=0.0.1a1",
    "pytest-xdist>=3.7.0",
    "pillow>=11.2.1",
    "lmnr[all]>=0.6.13",
    # "pytest-playwright-asyncio>=0.7.0",  # not actually needed I think
    "pytest-timeout>=2.4.0",
]
